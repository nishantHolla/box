===================================================================================================

BOX v0.1

A CIL program for filesystem encryption using OpenSSL's AES implementation.

github.com/nishantHolla

===================================================================================================


Index
-----

1. Definitions and Macros
2. Enums
3. Path
4. Counter
5. Crypto


1. Definitions and Macros
-------------------------

  => B_VERSION

    Version of Box.

  => B_PATH_MAX_LENGTH

    Maximum path length accepted

  => FNV_OFFSET

    Offset used by FNV hashing algorithm in b_counter_hash.

  => FNV_PRIM

    Prime number used by FNV hashing algorithm in b_counter_hash.

  => B_COUNTER_CAPACITY

    Capacity of buffer in B_COUNTER.

  => B_COUNTER_KEY_LENGTH

    Length of the key that can be stored in B_COUNTER. It is the length of SHA256 in OpenSSL.

  => B_CRYPTO_KEY_LENGTH 
    
    Length of the key used by the cryptographic functions. It is 32 bit in length.

  => B_CRYPTO_IV_LENGTH

    Length of the initializing vector used by the cryptographic function. It is 16 bit in length.

  => B_CRYPTO_SHA256_LENGTH

    Length of SHA256 hash. It is the length of SHA256 in OpenSSL.

  => B_CRYPTO_BUFFER_SIZE

    Size of buffer used while encrypting or decrypting files. It is 4KB.


2. Enums
--------

  => typedef enum B_EXIT_CODE B_EXIT_CODE

    Exit codes returned by functions that promise an exit code.

    B_EC_SUCCESS: Returned on success
    B_EC_INVALID_ARG: Returned when argument for a function is invalid
    B_EC_MALLOC_FAILED: Returned when malloc failed
    B_EC_SHA256_FAILED: Returned when computing SHA256 fails
    B_EC_FILE_OPEN_FAILED: Returned when opening a file fails
    B_EC_CRYPTO_CTX_FAILED: Returned when creating cryptographic context fails
    B_EC_CRYPTO_INIT_FAILED: Returned when initializing cryptographic context fails
    B_EC_CRYPTO_UPDATE_FAILED: Returned when updating cryptographic context fails
    B_EC_CRYPTO_FINAL_FAILED: Returned when finalizing cryptographic context fails

  => typedef enum B_PATH_STAT B_PATH_STAT

    Status codes returned by b_path_stat function to determine the status of a path.

    B_PATH_DIR: The path is directory
    B_PATH_FILE: The path is a file
    B_PATH_LINK_DIR: The path is a sym link to directory
    B_PATH_LINK_FILE: The path is a sym link to file
    B_PATH_UNKNOWN: The path stat could not be determined
    B_PATH_ERROR: The path does not exists


3. Path
-------

  => B_EXIT_CODE b_path_abs(const char *in, char *out)

    Computes the absolute path of the given path in and stores it in out. Out is assumed to be of
    sufficient size.

    Can return the following exit codes:
      B_EC_INVALID_ARG
      B_EC_SUCCESS


  => B_PATH_STAT b_path_stat(const char *path)

    Identifies the stat of the given path in.

    Returns one of B_PATH_STAT value.


4. Counter
----------

  => typedef struct B_COUNTER_BUCKET B_COUNTER_BUCKET

    Stores one key and its count. Also stores address of next bucket.

  => typedef struct B_COUNTER B_COUNTER

    Holds B_COUNTER_CAPACITY number of B_COUNTER_BUCKET in buffer. Also holds number of unique keys in
    buffer.

  => B_COUNTER_BUCKET *b_counter_create_bucket(const uchar_t *key)

    Creates and returns a B_COUNTER_BUCKET with the provided key by calling malloc. The key is assumed
    to be of correct size.

    Can return the following exit codes:
      B_EC_SUCCESS
      B_EC_MALLOC_FAILED

  => uint64_t b_counter_hash(const uchar_t *key)

    FNV hashing function used to hash key. Depends on definitions FNV_OFFSET and FNV_PRIM. The key is
    assumed to be of correct size.

    Always returns the hash of the key.

  => uint64_t b_counter_count(const uchar_t *key, B_COUNTER *counter, B_COUNTER_BUCKET **result)

    Returns the count of the provided key in the given counter. The key is assumed to be of correct size.
    Returns 0 if counter is NULL else returns the count of the key

  => B_EXIT_CODE b_counter_init(B_COUNTER *counter)

    Initializes the given counter.

    Can return the following exit codes:
      B_EC_INVALID_ARG
      B_EC_SUCCESS

  => B_EXIT_CODE b_counter_add(const uchar_t *key, B_COUNTER *counter)

    Adds the provided key in the given counter. The key is assumed to be of correct size.

    Can return the following exit codes:
      B_EC_INVALID_ARG
      B_EC_MALLOC_FAILED
      B_EC_SUCCESS

  => B_EXIT_CODE b_counter_remove(const uchar_t *key, B_COUNTER *counter)

    Removes the provided key in the given counter if it exists. The key is assumed to be of correct size.

    Can return the following exit codes:
      B_EC_INVALID_ARG
      B_EC_SUCCESS

  => B_EXIT_CODE b_counter_free(B_COUNTER *counter)

    Frees the given counter. The provided counter must not be used again afterwards.

    Can return the following exit codes:
      B_EC_INVALID_ARG
      B_EC_SUCCESS


5. Crypto
---------

  => typedef struct B_CRYPTO_PAIR B_CRYPTO_PAIR

    Contains uchar_t key of size B_CRYPTO_KEY_LENGTH and uchar_t iv of size B_CRYPTO_IV_LENGTH.

  => B_EXIT_CODE b_crypto_sha256_string(const char *in, const size_t length, uchar_t *out)

    Computes the SH256 of the given string in of given length and writes it to buffer out. The out
    buffer is assumed to be of correct size.

    Can return the following exit codes:
      B_EC_SHA256_FAILED
      B_EC_SUCCESS

  => B_EXIT_CODE b_crypto_sha256_file(const char *in_path, uchar_t *out)

    Computes the SHA256 of the file at given in_path and writes it to buffer out. The out buffer
    is assumed to be of correct size.

    Can return the following exit codes:
      B_EC_FILE_OPEN_FAILED
      B_EC_SUCCESS

  => B_EXIT_CODE b_crypto_gen_cp(const char *initializer, const size_t length, B_CRYPTO_PAIR *cp)

    Generates a cryptographic pair for the given initializer string.

    Can return the following exit codes:
      B_EC_SHA256_FAILED
      B_EC_SUCCESS

  => B_EXIT_CODE b_crypto_encode_string(
    const uchar_t *in, const size_t length, char *out, size_t *out_length
  )
    
    Encodes the given string in of given length into base64 and stores it in the given output buffer.
    The buffer is assumed to be of sufficient length. The total number of bytes written to the buffer
    is stored in the given out_length.

    Can return the following exit codes:
      B_EC_SUCCESS

  => B_EXIT_CODE b_crypto_decode_string(
    char *in, const size_t length, uchar_t *out, size_t *out_length
  )

    Decodes the given string in of given length from base64 and stores it in the given output buffer.
    The buffer is assumed to be of sufficient length. The total number of bytes written to the buffer
    is stored in the given out_length.

    Can return the following exit codes:
      B_EC_INVALID_ARG
      B_EC_SUCCESS

  => int hex_to_dec(const char x)

    Utility function used by b_crypto_decode_string to convert hex characters into binary bytes.

    Returns the integer value of the given character. If invalid character is passed, it returns -1.

  => B_EXIT_CODE b_crypto_encrypt_string(
    const char *in, const size_t length, uchar_t *out, size_t *out_length, B_CRYPTO_PAIR *cp
  )

    Encrypts the given string in of given length and writes the bytes into the given out buffer using
    the provied cryptographic pair cp. The buffer is assumed to be of sufficient length. The total
    number of bytes written to the buffer is stored in the given out_length.

    Can return the following exit codes:
      B_EC_CRYPTO_CTX_FAILED
      B_EC_CRYPTO_INIT_FAILED
      B_EC_CRYPTO_UPDATE_FAILED
      B_EC_CRYPTO_FINAL_FAILED
      B_EC_SUCCESS

  => B_EXIT_CODE b_crypto_decrypt_string(
    const uchar_t *in, const size_t length, char *out, size_t *out_length, B_CRYPTO_PAIR *cp
  )

    Decrypts the given string in of given length and writes the bytes into the given out buffer using
    the provied cryptographic pair cp. The buffer is assumed to be of sufficient length. The total
    number of bytes written to the buffer is stored in the given out_length.

    Can return the following exit codes:
      B_EC_CRYPTO_CTX_FAILED
      B_EC_CRYPTO_INIT_FAILED
      B_EC_CRYPTO_UPDATE_FAILED
      B_EC_CRYPTO_FINAL_FAILED
      B_EC_SUCCESS

  => B_EXIT_CODE b_crypto_encrypt_file(const char *in_path, const char *out_path, B_CRYPTO_PAIR *cp)

    Encrypts the file at given in_path to the given out_path with the provided cryptographic pair cp.

    Can return the following exit codes:
      B_EC_FILE_OPEN_FAILED
      B_EC_CRYPTO_CTX_FAILED
      B_EC_CRYPTO_INIT_FAILED
      B_EC_CRYPTO_UPDATE_FAILED
      B_EC_CRYPTO_FINAL_FAILED
      B_EC_SUCCESS

  => B_EXIT_CODE b_crypto_decrypt_file(const char *in_path, const char *out_path, B_CRYPTO_PAIR *cp)

    Decrypts the file at given in_path to the given out_path with the provided cryptographic pair cp.

    Can return the following exit codes:
      B_EC_FILE_OPEN_FAILED
      B_EC_CRYPTO_CTX_FAILED
      B_EC_CRYPTO_INIT_FAILED
      B_EC_CRYPTO_UPDATE_FAILED
      B_EC_CRYPTO_FINAL_FAILED
      B_EC_SUCCESS

  => void b_crypto_cipher_cleanup(EVP_CIPHER_CTX *ctx, FILE *in_file, FILE *out_file)

    Used internally by b_crypto_encrypt_file and b_crypto_decrypt_file to free the given resources.

    Does not return anything.

  => void b_crypto_sha_cleanup(EVP_MD_CTX *ctx, FILE *in_file, FILE *out_file)

    User internally by b_crypto_sha256_file to free the given resources.

    Does not return anything.
